BG_RAM_START			equ $0c0000
BG_RAM_SIZE			equ $1000
BG_RAM_ADDRESS_LINES		equ 12
BG_RAM_MASK			equ $ff

FG_RAM_START			equ $080000
FG_RAM_SIZE			equ $1000
FG_RAM_ADDRESS_LINES		equ 12
FG_RAM_MASK			equ $ff

PALETTE_RAM_START		equ $140000
PALETTE_RAM_MASK		equ $fff

	ifd _MAME_BUILD_

PALETTE_RAM_SIZE		equ $300
PALETTE_RAM_ADDRESS_LINES	equ 8

	else

PALETTE_RAM_SIZE		equ $400
PALETTE_RAM_ADDRESS_LINES	equ 10

	endif

PALETTE_SIZE			equ $20		; size of an individual palette

SPRITE_RAM_START		equ $100000
SPRITE_RAM_SIZE			equ $400
SPRITE_RAM_ADDRESS_LINES	equ 10
SPRITE_RAM_MASK			equ $ff

WORK_RAM_START			equ $1c0000
WORK_RAM_SIZE			equ $4000
WORK_RAM_ADDRESS_LINES		equ 14
WORK_RAM_MASK			equ $ffff

ROM_START			equ $000000
ROM_SIZE			equ $40000

REG_SOUND			equ $180009
REG_IRQ5_ACK			equ $180002
REG_IRQ6_ACK			equ $180000
REG_SCROLL_X			equ $180004
REG_SCROLL_Y			equ $180006

REG_INPUT_P1			equ $180005
REG_INPUT_P2			equ $180007
REG_INPUT_DSW1			equ $180001
REG_INPUT_DSW2			equ $180003
REG_INPUT_SYSTEM		equ $180009

SYS_VBLANK_BIT			equ $0
SYS_VBLANK			equ $01

DSW1_FLIP_SCREEN_BIT		equ $7
DSW1_FLIP_SCREEN		equ $80

CHAR_COLON			equ ':'

SOUND_NUM_STOP			equ $00

SCREEN_TILES_PER_LINE		equ 32
SCREEN_BYTES_PER_TILE		equ 4
SCREEN_BYTES_PER_LINE		equ (SCREEN_BYTES_PER_TILE * SCREEN_TILES_PER_LINE)

	; goto the correct fg memory location before printing text
	; to the screen
	macro SEEK_XY
		lea	(FG_RAM_START + $80 + (\1 * SCREEN_BYTES_PER_TILE) + (\2 * SCREEN_BYTES_PER_LINE)), a6
	endm

	macro SEEK_LN
		lea	(FG_RAM_START + $80 + (\1 * SCREEN_BYTES_PER_LINE)), a6
	endm

	macro SOUND_PLAY
		move.b	d0, REG_SOUND
	endm

	macro SOUND_STOP
		move.b	#SOUND_NUM_STOP, REG_SOUND
	endm

	macro WATCHDOG
	endm
