PALETTE_RAM_START		equ $0c00
PALETTE_RAM_SIZE		equ $100
PALETTE_RAM_ADDRESS_LINES	equ 8
PALETTE_SIZE			equ $20

SPRITE1_RAM_START		equ $3000
SPRITE1_RAM_SIZE		equ $1000
SPRITE1_RAM_ADDRESS_LINES	equ 12

SPRITE2_RAM_START		equ $5000
SPRITE2_RAM_SIZE		equ $1000
SPRITE2_RAM_ADDRESS_LINES	equ 12

TILE1_RAM_START			equ $2000
TILE1_RAM_SIZE			equ $800
TILE1_RAM_ADDRESS_LINES		equ 11

TILE2_RAM_START			equ $2800
TILE2_RAM_SIZE			equ $800
TILE2_RAM_ADDRESS_LINES		equ 11

TILE3_RAM_START			equ $4000
TILE3_RAM_SIZE			equ $800
TILE3_RAM_ADDRESS_LINES		equ 11

WORK_RAM_START			equ $1000
WORK_RAM_SIZE			equ $1000
WORK_RAM_ADDRESS_LINES		equ 12

ROM_SIZE			equ $8000
ROM_START			equ $8000

REG_WATCHDOG			equ $001e
REG_SOUND			equ $001c
REG_SOUND_IRQ_TRIGGER		equ $001a

REG_INPUT_P1			equ $0011
REG_INPUT_P2			equ $0012
REG_INPUT_DSW1			equ $0014
REG_INPUT_DSW2			equ $0015
REG_INPUT_DSW3			equ $0016
REG_INPUT_SYSTEM		equ $0010

CHAR_COLON			equ $10

; note only 28 tiles are visable
SCREEN_TILES_PER_LINE		equ 32
SCREEN_BYTES_PER_TILE		equ 1
SCREEN_BYTES_PER_LINE		equ (SCREEN_BYTES_PER_TILE * SCREEN_TILES_PER_LINE)

	; rows 0 - 4 are in tile2 ram and the rest of the screen is in tile1 ram
	macro	SEEK_XY
	if \2 >= 5
		ldx	#(TILE1_RAM_START + $7a0 + ((\2 - 5) * SCREEN_BYTES_PER_TILE) - (\1 * SCREEN_BYTES_PER_LINE))
	else
		ldx	#(TILE2_RAM_START + $7a0 + (\2 * SCREEN_BYTES_PER_TILE) - (\1 * SCREEN_BYTES_PER_LINE))
	endif
	endm

	macro	SEEK_LN
	if \1 >= 5
		ldx	#(TILE1_RAM_START + $7a0 + ((\1 - 5) * SCREEN_BYTES_PER_TILE))
	else
		ldx	#(TILE2_RAM_START + $7a0 + (\1 * SCREEN_BYTES_PER_TILE))
	endif
	endm

	macro	WATCHDOG
		sta	REG_WATCHDOG
	endm

	macro	SOUND_PLAY
		sta	REG_SOUND
		sta	REG_SOUND_IRQ_TRIGGER
	endm

	macro	SOUND_STOP
		clr	REG_SOUND
		sta	REG_SOUND_IRQ_TRIGGER
	endm
